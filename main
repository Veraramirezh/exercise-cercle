import arcade
import random
from dataclasses import dataclass

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

NUM_CIRCLES = 20
CIRCLE_RADIUS_RANGE = (10, 50)
CIRCLE_COLORS = [arcade.color.BLUE, arcade.color.FANDANGO_PINK,
        arcade.color.FRENCH_ROSE, arcade.color.GOLDEN_POPPY]

@dataclass
class Circle:
    x: float
    y: float
    radius: float
    color: arcade.Color

    def draw(self):
        arcade.draw_circle_filled(self.x, self.y, self.radius, self.color)

class MyGame(arcade.Window):
    def __init__(self):
        super().__init__(SCREEN_WIDTH, SCREEN_HEIGHT, "Exercice #2")
        self.circle_list = []

    def setup(self):
        # Fill the circle list with 20 Circle objects
        for i in range(NUM_CIRCLES):
            radius = random.randint(*CIRCLE_RADIUS_RANGE)
            x = random.randint(radius, SCREEN_WIDTH - radius)
            y = random.randint(radius, SCREEN_HEIGHT - radius)
            color = random.choice(CIRCLE_COLORS)
            circle = Circle(x, y, radius, color)
            self.circle_list.append(circle)

    def on_draw(self):
        arcade.start_render()
        for circle in self.circle_list:
            circle.draw()

    def on_mouse_press(self, x, y, button, modifiers):
        if button == arcade.MOUSE_BUTTON_LEFT:
            # Find and remove the clicked circle
            for circle in self.circle_list:
                distance = ((x - circle.x) ** 2 + (y - circle.y) ** 2) ** 0.5
                if distance <= circle.radius:
                    self.circle_list.remove(circle)
                    break
        elif button == arcade.MOUSE_BUTTON_RIGHT:
            # Change the color of the clicked circle
            for circle in self.circle_list:
                distance = ((x - circle.x) ** 2 + (y - circle.y) ** 2) ** 0.5
                if distance <= circle.radius:
                    new_color = random.choice(CIRCLE_COLORS)
                    circle.color = new_color
                    break

def main():
    my_game = MyGame()
    my_game.setup()
    arcade.run()

if __name__ == "__main__":
    main()
